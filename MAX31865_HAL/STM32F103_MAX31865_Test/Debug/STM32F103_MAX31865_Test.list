
STM32F103_MAX31865_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ae8  08003ae8  00013ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003b50  08003b50  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b50  08003b50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000078  08003bd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003bd0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c8f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149a  00000000  00000000  00026d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  000281d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  000287c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e91  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c35  00000000  00000000  0003fb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000814b2  00000000  00000000  000467ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a40  00000000  00000000  000c7cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003acc 	.word	0x08003acc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003acc 	.word	0x08003acc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <MAX31865_Init>:
 */

#if defined (USE_CMSIS)
void MAX31865_Init(SPI_TypeDef* SPI, uint8_t num_wires) {
#elif defined (USE_HAL)
void MAX31865_Init(SPI_HandleTypeDef *hspi, uint8_t num_wires) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
#endif

	MAX31865_Sensor_Error = 0;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MAX31865_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d002      	beq.n	8000aea <MAX31865_Init+0x22>
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d102      	bne.n	8000af0 <MAX31865_Init+0x28>
		MAX31865_Configuration_register_write[1] = 0xC3; 
 8000aea:	23c3      	movs	r3, #195	; 0xc3
 8000aec:	737b      	strb	r3, [r7, #13]
 8000aee:	e004      	b.n	8000afa <MAX31865_Init+0x32>
	}
	else if (num_wires == 3) {
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d101      	bne.n	8000afa <MAX31865_Init+0x32>
		MAX31865_Configuration_register_write[1] = 0xD3; 
 8000af6:	23d3      	movs	r3, #211	; 0xd3
 8000af8:	737b      	strb	r3, [r7, #13]
	}
	NSS_ON;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MAX31865_Init+0x5c>)
 8000afc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b00:	611a      	str	r2, [r3, #16]
#if defined (USE_CMSIS)
	CMSIS_SPI_Data_Transmit_8BIT(SPI, MAX31865_Configuration_register_write, 2, 100);
#elif defined (USE_HAL)
	HAL_SPI_Transmit(hspi, MAX31865_Configuration_register_write, 2, 100);
 8000b02:	f107 010c 	add.w	r1, r7, #12
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	2202      	movs	r2, #2
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f001 faec 	bl	80020e8 <HAL_SPI_Transmit>

#endif
	NSS_OFF;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <MAX31865_Init+0x5c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	611a      	str	r2, [r3, #16]
	
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000a0 	.word	0x200000a0
 8000b24:	40010800 	.word	0x40010800

08000b28 <MAX31865_Get_Resistance>:
*/
    
#if defined (USE_CMSIS)
double MAX31865_Get_Resistance(SPI_TypeDef* SPI) {
#elif defined (USE_HAL)
double MAX31865_Get_Resistance(SPI_HandleTypeDef * hspi) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]

	NSS_ON;
 8000b34:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <MAX31865_Get_Resistance+0xc8>)
 8000b36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b3a:	611a      	str	r2, [r3, #16]
#if defined (USE_CMSIS)
	CMSIS_SPI_Data_Transmit_8BIT(SPI, &MAX31865_start_address_of_the_poll, 1, 100);
	CMSIS_SPI_Data_Receive_8BIT(SPI,  MAX31865_rx_buffer, 7, 100);
#elif defined (USE_HAL)
	HAL_SPI_Transmit(hspi, &MAX31865_start_address_of_the_poll, 1, 100);
 8000b3c:	f107 010f 	add.w	r1, r7, #15
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	2201      	movs	r2, #1
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f001 facf 	bl	80020e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, MAX31865_rx_buffer, 7, 100);
 8000b4a:	f107 0118 	add.w	r1, r7, #24
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2207      	movs	r2, #7
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f001 fc0b 	bl	800236e <HAL_SPI_Receive>
#endif
	NSS_OFF;
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <MAX31865_Get_Resistance+0xc8>)
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	611a      	str	r2, [r3, #16]

	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8000b5e:	7e3b      	ldrb	r3, [r7, #24]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	7e7a      	ldrb	r2, [r7, #25]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	105b      	asrs	r3, r3, #1
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	823b      	strh	r3, [r7, #16]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 8000b6c:	7ebb      	ldrb	r3, [r7, #26]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	7efa      	ldrb	r2, [r7, #27]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	105b      	asrs	r3, r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	827b      	strh	r3, [r7, #18]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 8000b7a:	7f3b      	ldrb	r3, [r7, #28]
 8000b7c:	021b      	lsls	r3, r3, #8
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	7f7b      	ldrb	r3, [r7, #29]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	82bb      	strh	r3, [r7, #20]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8000b8c:	7fbb      	ldrb	r3, [r7, #30]
 8000b8e:	75bb      	strb	r3, [r7, #22]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8000b90:	7dbb      	ldrb	r3, [r7, #22]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d009      	beq.n	8000baa <MAX31865_Get_Resistance+0x82>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MAX31865_Get_Resistance+0xcc>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]

		/*----Автоматический сброс ошибки----*/
#if defined (USE_CMSIS)
		MAX31865_Init(SPI, 3);
#elif defined (USE_HAL)
		MAX31865_Init(hspi, 3);
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff92 	bl	8000ac8 <MAX31865_Init>
#endif		
		MAX31865_Sensor_Error = 0;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MAX31865_Get_Resistance+0xcc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
		//Так можно сбросить ошибку, проинициализировав датчик заново.
		//Сброс ошибки, по желанию. Обычно ее не сбрасывают в автомате, а зовут оператора, чтоб квитировал ошибку.
		//До прихода оператора, установка находится в ошибке, все управляющие узлы должны отключаться.
	}
	
    data = ((double)MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_R_REF) / (double)32768.0; // Replace 4000 by 400 for PT100
 8000baa:	8a3b      	ldrh	r3, [r7, #16]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc11 	bl	80003d4 <__aeabi_ui2d>
 8000bb2:	a30d      	add	r3, pc, #52	; (adr r3, 8000be8 <MAX31865_Get_Resistance+0xc0>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	f7ff fc86 	bl	80004c8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MAX31865_Get_Resistance+0xd0>)
 8000bca:	f7ff fda7 	bl	800071c <__aeabi_ddiv>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return data;
 8000bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	f3af 8000 	nop.w
 8000be8:	00000000 	.word	0x00000000
 8000bec:	407ac800 	.word	0x407ac800
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	200000a0 	.word	0x200000a0
 8000bf8:	40e00000 	.word	0x40e00000
 8000bfc:	00000000 	.word	0x00000000

08000c00 <MAX31865_Get_Temperature>:
 *  @retval  Возвращает значение температуры
 *  @attention Да, функция тяжелая, но все сделано так, чтоб получить максимально правильное значение.
 **************************************************************************************************
*/

double MAX31865_Get_Temperature(double PT100_Resistance) {
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (float)100.0f) {
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <MAX31865_Get_Temperature+0x1e0>)
 8000c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c14:	f7ff fede 	bl	80009d4 <__aeabi_dcmpge>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d038      	beq.n	8000c90 <MAX31865_Get_Temperature+0x90>
		double MAX31865_math_Discriminant = (double)0.00001527480889 - ((double)-0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0)));
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <MAX31865_Get_Temperature+0x1e0>)
 8000c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c28:	f7ff fd78 	bl	800071c <__aeabi_ddiv>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	496b      	ldr	r1, [pc, #428]	; (8000de4 <MAX31865_Get_Temperature+0x1e4>)
 8000c36:	f7ff fa8f 	bl	8000158 <__aeabi_dsub>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	a353      	add	r3, pc, #332	; (adr r3, 8000d90 <MAX31865_Get_Temperature+0x190>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	f7ff fc3e 	bl	80004c8 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	a350      	add	r3, pc, #320	; (adr r3, 8000d98 <MAX31865_Get_Temperature+0x198>)
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f7ff fa7f 	bl	800015c <__adddf3>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	e9c7 2302 	strd	r2, r3, [r7, #8]
		return ((double)-0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double)-0.000001155;
 8000c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c6a:	f002 f81f 	bl	8002cac <sqrt>
 8000c6e:	a34c      	add	r3, pc, #304	; (adr r3, 8000da0 <MAX31865_Get_Temperature+0x1a0>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fa70 	bl	8000158 <__aeabi_dsub>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	a349      	add	r3, pc, #292	; (adr r3, 8000da8 <MAX31865_Get_Temperature+0x1a8>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fd49 	bl	800071c <__aeabi_ddiv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	e078      	b.n	8000d82 <MAX31865_Get_Temperature+0x182>
	}
	else {
		return MAX31865_PT100_T = (double)0.000000000270 * pow(PT100_Resistance, 5) - (double)0.000000066245 * pow(PT100_Resistance, 4) - (double)0.000000184636 * pow(PT100_Resistance, 3)
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <MAX31865_Get_Temperature+0x1e8>)
 8000c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c9a:	f001 ff5b 	bl	8002b54 <pow>
 8000c9e:	a344      	add	r3, pc, #272	; (adr r3, 8000db0 <MAX31865_Get_Temperature+0x1b0>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fc10 	bl	80004c8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4614      	mov	r4, r2
 8000cae:	461d      	mov	r5, r3
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <MAX31865_Get_Temperature+0x1ec>)
 8000cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cba:	f001 ff4b 	bl	8002b54 <pow>
 8000cbe:	a33e      	add	r3, pc, #248	; (adr r3, 8000db8 <MAX31865_Get_Temperature+0x1b8>)
 8000cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc4:	f7ff fc00 	bl	80004c8 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fa42 	bl	8000158 <__aeabi_dsub>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4614      	mov	r4, r2
 8000cda:	461d      	mov	r5, r3
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <MAX31865_Get_Temperature+0x1f0>)
 8000ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ce6:	f001 ff35 	bl	8002b54 <pow>
 8000cea:	a335      	add	r3, pc, #212	; (adr r3, 8000dc0 <MAX31865_Get_Temperature+0x1c0>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fbea 	bl	80004c8 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f7ff fa2c 	bl	8000158 <__aeabi_dsub>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4614      	mov	r4, r2
 8000d06:	461d      	mov	r5, r3
			+ (double)0.002320232987 * pow(PT100_Resistance, 2) + (double)2.229927824035 * PT100_Resistance - (double)242.090854986215;
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d14:	f001 ff1e 	bl	8002b54 <pow>
 8000d18:	a32b      	add	r3, pc, #172	; (adr r3, 8000dc8 <MAX31865_Get_Temperature+0x1c8>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fbd3 	bl	80004c8 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4620      	mov	r0, r4
 8000d28:	4629      	mov	r1, r5
 8000d2a:	f7ff fa17 	bl	800015c <__adddf3>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4614      	mov	r4, r2
 8000d34:	461d      	mov	r5, r3
 8000d36:	a326      	add	r3, pc, #152	; (adr r3, 8000dd0 <MAX31865_Get_Temperature+0x1d0>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d40:	f7ff fbc2 	bl	80004c8 <__aeabi_dmul>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	f7ff fa06 	bl	800015c <__adddf3>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	a31f      	add	r3, pc, #124	; (adr r3, 8000dd8 <MAX31865_Get_Temperature+0x1d8>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f7ff f9fb 	bl	8000158 <__aeabi_dsub>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fe5d 	bl	8000a28 <__aeabi_d2f>
 8000d6e:	4603      	mov	r3, r0
		return MAX31865_PT100_T = (double)0.000000000270 * pow(PT100_Resistance, 5) - (double)0.000000066245 * pow(PT100_Resistance, 4) - (double)0.000000184636 * pow(PT100_Resistance, 3)
 8000d70:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <MAX31865_Get_Temperature+0x1f4>)
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MAX31865_Get_Temperature+0x1f4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb4d 	bl	8000418 <__aeabi_f2d>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
	}
}
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8c:	f3af 8000 	nop.w
 8000d90:	ee19ce88 	.word	0xee19ce88
 8000d94:	3ec360af 	.word	0x3ec360af
 8000d98:	dfc928d8 	.word	0xdfc928d8
 8000d9c:	3ef0044c 	.word	0x3ef0044c
 8000da0:	4aed641c 	.word	0x4aed641c
 8000da4:	3f700226 	.word	0x3f700226
 8000da8:	ee19ce88 	.word	0xee19ce88
 8000dac:	beb360af 	.word	0xbeb360af
 8000db0:	e63e6cde 	.word	0xe63e6cde
 8000db4:	3df28de3 	.word	0x3df28de3
 8000db8:	5d50ae3a 	.word	0x5d50ae3a
 8000dbc:	3e71c852 	.word	0x3e71c852
 8000dc0:	6e664b7f 	.word	0x6e664b7f
 8000dc4:	3e88c80b 	.word	0x3e88c80b
 8000dc8:	998b63de 	.word	0x998b63de
 8000dcc:	3f6301e1 	.word	0x3f6301e1
 8000dd0:	66255dbb 	.word	0x66255dbb
 8000dd4:	4001d6e4 	.word	0x4001d6e4
 8000dd8:	48b74f1a 	.word	0x48b74f1a
 8000ddc:	406e42e8 	.word	0x406e42e8
 8000de0:	40590000 	.word	0x40590000
 8000de4:	3ff00000 	.word	0x3ff00000
 8000de8:	40140000 	.word	0x40140000
 8000dec:	40100000 	.word	0x40100000
 8000df0:	40080000 	.word	0x40080000
 8000df4:	20000098 	.word	0x20000098

08000df8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dfc:	f000 f9e8 	bl	80011d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e00:	f000 f852 	bl	8000ea8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e04:	f000 f8ce 	bl	8000fa4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000e08:	f000 f896 	bl	8000f38 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	MAX31865_Init(&hspi1, 3); //3 проводное подключение
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <main+0x9c>)
 8000e10:	f7ff fe5a 	bl	8000ac8 <MAX31865_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		MAX31865_PT100_R = (MAX31865_Get_Resistance(&hspi1)* MAX31865_Correction_multiplicative) + MAX31865_Correction_additive; //Значение сопротивления датчика PT100
 8000e14:	481f      	ldr	r0, [pc, #124]	; (8000e94 <main+0x9c>)
 8000e16:	f7ff fe87 	bl	8000b28 <MAX31865_Get_Resistance>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	460d      	mov	r5, r1
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <main+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff faf8 	bl	8000418 <__aeabi_f2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	4629      	mov	r1, r5
 8000e30:	f7ff fb4a 	bl	80004c8 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4614      	mov	r4, r2
 8000e3a:	461d      	mov	r5, r3
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0xa4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fae9 	bl	8000418 <__aeabi_f2d>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f7ff f985 	bl	800015c <__adddf3>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fde5 	bl	8000a28 <__aeabi_d2f>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <main+0xa8>)
 8000e62:	6013      	str	r3, [r2, #0]
		MAX31865_PT100_T = MAX31865_Get_Temperature(MAX31865_PT100_R); //Рассчет температуры датчика PT100
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <main+0xa8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fad5 	bl	8000418 <__aeabi_f2d>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fec3 	bl	8000c00 <MAX31865_Get_Temperature>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fdd1 	bl	8000a28 <__aeabi_d2f>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <main+0xac>)
 8000e8a:	6013      	str	r3, [r2, #0]
		HAL_Delay(200);
 8000e8c:	20c8      	movs	r0, #200	; 0xc8
 8000e8e:	f000 fa01 	bl	8001294 <HAL_Delay>
		MAX31865_PT100_R = (MAX31865_Get_Resistance(&hspi1)* MAX31865_Correction_multiplicative) + MAX31865_Correction_additive; //Значение сопротивления датчика PT100
 8000e92:	e7bf      	b.n	8000e14 <main+0x1c>
 8000e94:	200000a4 	.word	0x200000a4
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	20000098 	.word	0x20000098

08000ea8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b090      	sub	sp, #64	; 0x40
 8000eac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fe44 	bl	8002b44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000edc:	2302      	movs	r3, #2
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fc73 	bl	80017dc <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x58>
		Error_Handler();
 8000efc:	f000 f890 	bl	8001020 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2302      	movs	r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f10:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fede 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x82>
		Error_Handler();
 8000f26:	f000 f87b 	bl	8001020 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000f2a:	f000 ffc1 	bl	8001eb0 <HAL_RCC_EnableCSS>
}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	; 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_SPI1_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f6c:	2218      	movs	r2, #24
 8000f6e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_SPI1_Init+0x64>)
 8000f8a:	f001 f829 	bl	8001fe0 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000f94:	f000 f844 	bl	8001020 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a10      	ldr	r2, [pc, #64]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_GPIO_Init+0x74>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <MX_GPIO_Init+0x78>)
 8000fee:	f000 fbdd 	bl	80017ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0x78>)
 800100a:	f000 fa4b 	bl	80014a4 <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40010800 	.word	0x40010800

08001020 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_SPI_MspInit+0x88>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d12f      	bne.n	8001110 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_SPI_MspInit+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010e0:	23a0      	movs	r3, #160	; 0xa0
 80010e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <HAL_SPI_MspInit+0x90>)
 80010f4:	f000 f9d6 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_SPI_MspInit+0x90>)
 800110c:	f000 f9ca 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40013000 	.word	0x40013000
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001128:	f000 ff22 	bl	8001f70 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x8>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f000 f875 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}

08001176 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
	...

08001184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff fff7 	bl	8001176 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a0:	4c09      	ldr	r4, [pc, #36]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 fca5 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff fe21 	bl	8000df8 <main>
  bx lr
 80011b6:	4770      	bx	lr
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011c0:	08003b58 	.word	0x08003b58
  ldr r2, =_sbss
 80011c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011c8:	20000100 	.word	0x20000100

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x28>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f92b 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff ff1e 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f935 	bl	800148a <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f90b 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000004 	.word	0x20000004
 8001254:	2000000c 	.word	0x2000000c
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	2000000c 	.word	0x2000000c
 800127c:	200000fc 	.word	0x200000fc

08001280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200000fc 	.word	0x200000fc

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000000c 	.word	0x2000000c

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff49 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e169      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8158 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a9a      	ldr	r2, [pc, #616]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a98      	ldr	r2, [pc, #608]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a96      	ldr	r2, [pc, #600]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a96      	ldr	r2, [pc, #600]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a92      	ldr	r2, [pc, #584]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a92      	ldr	r2, [pc, #584]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a90      	ldr	r2, [pc, #576]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a79      	ldr	r2, [pc, #484]	; (8001758 <HAL_GPIO_Init+0x2b4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b1 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x2b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a40      	ldr	r2, [pc, #256]	; (8001764 <HAL_GPIO_Init+0x2c0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1e8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001684:	2304      	movs	r3, #4
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001690:	2300      	movs	r3, #0
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a2:	492f      	ldr	r1, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	492c      	ldr	r1, [pc, #176]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4928      	ldr	r1, [pc, #160]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	491e      	ldr	r1, [pc, #120]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4918      	ldr	r1, [pc, #96]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4914      	ldr	r1, [pc, #80]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e021      	b.n	8001786 <HAL_GPIO_Init+0x2e2>
 8001742:	bf00      	nop
 8001744:	10320000 	.word	0x10320000
 8001748:	10310000 	.word	0x10310000
 800174c:	10220000 	.word	0x10220000
 8001750:	10210000 	.word	0x10210000
 8001754:	10120000 	.word	0x10120000
 8001758:	10110000 	.word	0x10110000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_GPIO_Init+0x304>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001782:	4013      	ands	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae8e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e26c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001808:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x12c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e246      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x76>
 8001844:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7a      	ldr	r2, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xbc>
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fce2 	bl	8001280 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fcde 	bl	8001280 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1fa      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe4>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fcce 	bl	8001280 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fcca 	bl	8001280 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1e6      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x10c>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1ba      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4939      	ldr	r1, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e03a      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fc83 	bl	8001280 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fc7f 	bl	8001280 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e19b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4927      	ldr	r1, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x270>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fc62 	bl	8001280 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fc5e 	bl	8001280 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e17a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03a      	beq.n	8001a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fc42 	bl	8001280 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fc3e 	bl	8001280 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e15a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 faba 	bl	8001f98 <RCC_Delay>
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fc28 	bl	8001280 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc24 	bl	8001280 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d908      	bls.n	8001a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e140      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e9      	bne.n	8001a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a6 	beq.w	8001bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a93      	ldr	r2, [pc, #588]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fbe5 	bl	8001280 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff fbe1 	bl	8001280 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0fd      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x312>
 8001ae0:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e02d      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	e01c      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x356>
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0x36e>
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d015      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fb95 	bl	8001280 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fb91 	bl	8001280 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0ab      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ee      	beq.n	8001b5a <HAL_RCC_OscConfig+0x37e>
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fb7f 	bl	8001280 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fb7b 	bl	8001280 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e095      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8081 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d061      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d146      	bne.n	8001c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fb4f 	bl	8001280 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff fb4b 	bl	8001280 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e067      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	430b      	orrs	r3, r1
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fb1f 	bl	8001280 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fb1b 	bl	8001280 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e037      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x46a>
 8001c64:	e02f      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCC_OscConfig+0x4fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb08 	bl	8001280 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fb04 	bl	8001280 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x498>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42420060 	.word	0x42420060

08001cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d0      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 0207 	bic.w	r2, r3, #7
 8001d06:	4965      	ldr	r1, [pc, #404]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0b8      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d040      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e07f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e073      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4936      	ldr	r1, [pc, #216]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff fa58 	bl	8001280 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff fa54 	bl	8001280 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e053      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d210      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	4922      	ldr	r1, [pc, #136]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e6a:	f000 f82d 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f9b6 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003ae8 	.word	0x08003ae8
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_EnableCSS+0x14>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	4242004c 	.word	0x4242004c

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x36>
 8001ef6:	e027      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	e027      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0c5b      	lsrs	r3, r3, #17
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	fb02 f203 	mul.w	r2, r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e004      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	693b      	ldr	r3, [r7, #16]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	08003af8 	.word	0x08003af8
 8001f68:	08003b08 	.word	0x08003b08
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d104      	bne.n	8001f8a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001f80:	f000 f828 	bl	8001fd4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	701a      	strb	r2, [r3, #0]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	4002100a 	.word	0x4002100a

08001f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <RCC_Delay+0x34>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <RCC_Delay+0x38>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fb4:	bf00      	nop
  }
  while (Delay --);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <RCC_Delay+0x1c>
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e076      	b.n	80020e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002002:	d009      	beq.n	8002018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
 800200a:	e005      	b.n	8002018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff f82c 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800204e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	0c1a      	lsrs	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f002 0204 	and.w	r2, r2, #4
 80020be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_SPI_Transmit+0x22>
 8002106:	2302      	movs	r3, #2
 8002108:	e12d      	b.n	8002366 <HAL_SPI_Transmit+0x27e>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002112:	f7ff f8b5 	bl	8001280 <HAL_GetTick>
 8002116:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002128:	2302      	movs	r3, #2
 800212a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800212c:	e116      	b.n	800235c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_Transmit+0x52>
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800213e:	e10d      	b.n	800235c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002186:	d10f      	bne.n	80021a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002196:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d007      	beq.n	80021c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ce:	d14f      	bne.n	8002270 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_SPI_Transmit+0xf6>
 80021d8:	8afb      	ldrh	r3, [r7, #22]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d142      	bne.n	8002264 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	1c9a      	adds	r2, r3, #2
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002202:	e02f      	b.n	8002264 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d112      	bne.n	8002238 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
 8002236:	e015      	b.n	8002264 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002238:	f7ff f822 	bl	8001280 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d803      	bhi.n	8002250 <HAL_SPI_Transmit+0x168>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d102      	bne.n	8002256 <HAL_SPI_Transmit+0x16e>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002262:	e07b      	b.n	800235c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ca      	bne.n	8002204 <HAL_SPI_Transmit+0x11c>
 800226e:	e050      	b.n	8002312 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_Transmit+0x196>
 8002278:	8afb      	ldrh	r3, [r7, #22]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d144      	bne.n	8002308 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a4:	e030      	b.n	8002308 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d113      	bne.n	80022dc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80022da:	e015      	b.n	8002308 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022dc:	f7fe ffd0 	bl	8001280 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d803      	bhi.n	80022f4 <HAL_SPI_Transmit+0x20c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d102      	bne.n	80022fa <HAL_SPI_Transmit+0x212>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002306:	e029      	b.n	800235c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1c9      	bne.n	80022a6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fbcc 	bl	8002ab4 <SPI_EndRxTxTransaction>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e003      	b.n	800235c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002364:	7ffb      	ldrb	r3, [r7, #31]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b088      	sub	sp, #32
 8002372:	af02      	add	r7, sp, #8
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d002      	beq.n	8002394 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002392:	e0fb      	b.n	800258c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800239c:	d112      	bne.n	80023c4 <HAL_SPI_Receive+0x56>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2204      	movs	r2, #4
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f8ef 	bl	800259e <HAL_SPI_TransmitReceive>
 80023c0:	4603      	mov	r3, r0
 80023c2:	e0e8      	b.n	8002596 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Receive+0x64>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0e1      	b.n	8002596 <HAL_SPI_Receive+0x228>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023da:	f7fe ff51 	bl	8001280 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_SPI_Receive+0x7e>
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023f0:	e0cc      	b.n	800258c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2204      	movs	r2, #4
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002438:	d10f      	bne.n	800245a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002448:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d007      	beq.n	8002478 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d16a      	bne.n	8002556 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002480:	e032      	b.n	80024e8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d115      	bne.n	80024bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f103 020c 	add.w	r2, r3, #12
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024ba:	e015      	b.n	80024e8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024bc:	f7fe fee0 	bl	8001280 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d803      	bhi.n	80024d4 <HAL_SPI_Receive+0x166>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d102      	bne.n	80024da <HAL_SPI_Receive+0x16c>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024e6:	e051      	b.n	800258c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1c7      	bne.n	8002482 <HAL_SPI_Receive+0x114>
 80024f2:	e035      	b.n	8002560 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d113      	bne.n	800252a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	b292      	uxth	r2, r2
 800250e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	1c9a      	adds	r2, r3, #2
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002528:	e015      	b.n	8002556 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252a:	f7fe fea9 	bl	8001280 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <HAL_SPI_Receive+0x1d4>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Receive+0x1da>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002554:	e01a      	b.n	800258c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1c9      	bne.n	80024f4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fa53 	bl	8002a10 <SPI_EndRxTransaction>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
 8002582:	e003      	b.n	800258c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08c      	sub	sp, #48	; 0x30
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x26>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e198      	b.n	80028f6 <HAL_SPI_TransmitReceive+0x358>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025cc:	f7fe fe58 	bl	8001280 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d00f      	beq.n	800260e <HAL_SPI_TransmitReceive+0x70>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f4:	d107      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x68>
 80025fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260c:	e16d      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x82>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x82>
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002626:	e160      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b04      	cmp	r3, #4
 8002632:	d003      	beq.n	800263c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2205      	movs	r2, #5
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	887a      	ldrh	r2, [r7, #2]
 8002652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d007      	beq.n	8002690 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	d17c      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_TransmitReceive+0x10a>
 80026a2:	8b7b      	ldrh	r3, [r7, #26]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d16a      	bne.n	800277e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	1c9a      	adds	r2, r3, #2
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026cc:	e057      	b.n	800277e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11b      	bne.n	8002714 <HAL_SPI_TransmitReceive+0x176>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_SPI_TransmitReceive+0x176>
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d113      	bne.n	8002714 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	1c9a      	adds	r2, r3, #2
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d119      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x1b8>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d014      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	b292      	uxth	r2, r2
 8002738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	1c9a      	adds	r2, r3, #2
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002752:	2301      	movs	r3, #1
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002756:	f7fe fd93 	bl	8001280 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002762:	429a      	cmp	r2, r3
 8002764:	d80b      	bhi.n	800277e <HAL_SPI_TransmitReceive+0x1e0>
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d007      	beq.n	800277e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800277c:	e0b5      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1a2      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x130>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d19d      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x130>
 8002792:	e080      	b.n	8002896 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x204>
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d16f      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c8:	e05b      	b.n	8002882 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d11c      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x274>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x274>
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d114      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d119      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2b6>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002850:	2301      	movs	r3, #1
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002854:	f7fe fd14 	bl	8001280 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002860:	429a      	cmp	r2, r3
 8002862:	d803      	bhi.n	800286c <HAL_SPI_TransmitReceive+0x2ce>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d102      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x2d4>
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002880:	e033      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d19e      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x22c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d199      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f90a 	bl	8002ab4 <SPI_EndRxTxTransaction>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028b2:	e01a      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028e0:	e003      	b.n	80028ea <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002910:	f7fe fcb6 	bl	8001280 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002920:	f7fe fcae 	bl	8001280 <HAL_GetTick>
 8002924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	0d1b      	lsrs	r3, r3, #20
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002936:	e054      	b.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d050      	beq.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002940:	f7fe fc9e 	bl	8001280 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	429a      	cmp	r2, r3
 800294e:	d902      	bls.n	8002956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13d      	bne.n	80029d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296e:	d111      	bne.n	8002994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002978:	d004      	beq.n	8002984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d107      	bne.n	8002994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299c:	d10f      	bne.n	80029be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e017      	b.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3b01      	subs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d19b      	bne.n	8002938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000004 	.word	0x20000004

08002a10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a24:	d111      	bne.n	8002a4a <SPI_EndRxTransaction+0x3a>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2e:	d004      	beq.n	8002a3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a38:	d107      	bne.n	8002a4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a48:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a52:	d117      	bne.n	8002a84 <SPI_EndRxTransaction+0x74>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5c:	d112      	bne.n	8002a84 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2101      	movs	r1, #1
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ff49 	bl	8002900 <SPI_WaitFlagStateUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01a      	beq.n	8002aaa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e013      	b.n	8002aac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff36 	bl	8002900 <SPI_WaitFlagStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e000      	b.n	8002aac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff ff18 	bl	8002900 <SPI_WaitFlagStateUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e000      	b.n	8002ae8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <__errno>:
 8002af0:	4b01      	ldr	r3, [pc, #4]	; (8002af8 <__errno+0x8>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	2600      	movs	r6, #0
 8002b00:	4d0c      	ldr	r5, [pc, #48]	; (8002b34 <__libc_init_array+0x38>)
 8002b02:	4c0d      	ldr	r4, [pc, #52]	; (8002b38 <__libc_init_array+0x3c>)
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	f000 ffde 	bl	8003acc <_init>
 8002b10:	2600      	movs	r6, #0
 8002b12:	4d0a      	ldr	r5, [pc, #40]	; (8002b3c <__libc_init_array+0x40>)
 8002b14:	4c0a      	ldr	r4, [pc, #40]	; (8002b40 <__libc_init_array+0x44>)
 8002b16:	1b64      	subs	r4, r4, r5
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08003b50 	.word	0x08003b50
 8002b38:	08003b50 	.word	0x08003b50
 8002b3c:	08003b50 	.word	0x08003b50
 8002b40:	08003b54 	.word	0x08003b54

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <pow>:
 8002b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b58:	461f      	mov	r7, r3
 8002b5a:	4680      	mov	r8, r0
 8002b5c:	4689      	mov	r9, r1
 8002b5e:	4616      	mov	r6, r2
 8002b60:	f000 f8d2 	bl	8002d08 <__ieee754_pow>
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <pow+0x148>)
 8002b66:	4604      	mov	r4, r0
 8002b68:	f993 3000 	ldrsb.w	r3, [r3]
 8002b6c:	460d      	mov	r5, r1
 8002b6e:	3301      	adds	r3, #1
 8002b70:	d015      	beq.n	8002b9e <pow+0x4a>
 8002b72:	4632      	mov	r2, r6
 8002b74:	463b      	mov	r3, r7
 8002b76:	4630      	mov	r0, r6
 8002b78:	4639      	mov	r1, r7
 8002b7a:	f7fd ff3f 	bl	80009fc <__aeabi_dcmpun>
 8002b7e:	b970      	cbnz	r0, 8002b9e <pow+0x4a>
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	4649      	mov	r1, r9
 8002b88:	f7fd ff38 	bl	80009fc <__aeabi_dcmpun>
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	b148      	cbz	r0, 8002ba6 <pow+0x52>
 8002b92:	4630      	mov	r0, r6
 8002b94:	4639      	mov	r1, r7
 8002b96:	f7fd feff 	bl	8000998 <__aeabi_dcmpeq>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d17b      	bne.n	8002c96 <pow+0x142>
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	4649      	mov	r1, r9
 8002baa:	f7fd fef5 	bl	8000998 <__aeabi_dcmpeq>
 8002bae:	b1e0      	cbz	r0, 8002bea <pow+0x96>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	4639      	mov	r1, r7
 8002bb8:	f7fd feee 	bl	8000998 <__aeabi_dcmpeq>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d16a      	bne.n	8002c96 <pow+0x142>
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4639      	mov	r1, r7
 8002bc4:	f000 fe65 	bl	8003892 <finite>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d0e8      	beq.n	8002b9e <pow+0x4a>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	4639      	mov	r1, r7
 8002bd4:	f7fd feea 	bl	80009ac <__aeabi_dcmplt>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d0e0      	beq.n	8002b9e <pow+0x4a>
 8002bdc:	f7ff ff88 	bl	8002af0 <__errno>
 8002be0:	2321      	movs	r3, #33	; 0x21
 8002be2:	2400      	movs	r4, #0
 8002be4:	6003      	str	r3, [r0, #0]
 8002be6:	4d2e      	ldr	r5, [pc, #184]	; (8002ca0 <pow+0x14c>)
 8002be8:	e7d9      	b.n	8002b9e <pow+0x4a>
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f000 fe50 	bl	8003892 <finite>
 8002bf2:	bba8      	cbnz	r0, 8002c60 <pow+0x10c>
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	f000 fe4b 	bl	8003892 <finite>
 8002bfc:	b380      	cbz	r0, 8002c60 <pow+0x10c>
 8002bfe:	4630      	mov	r0, r6
 8002c00:	4639      	mov	r1, r7
 8002c02:	f000 fe46 	bl	8003892 <finite>
 8002c06:	b358      	cbz	r0, 8002c60 <pow+0x10c>
 8002c08:	4622      	mov	r2, r4
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd fef4 	bl	80009fc <__aeabi_dcmpun>
 8002c14:	b160      	cbz	r0, 8002c30 <pow+0xdc>
 8002c16:	f7ff ff6b 	bl	8002af0 <__errno>
 8002c1a:	2321      	movs	r3, #33	; 0x21
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6003      	str	r3, [r0, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd fd79 	bl	800071c <__aeabi_ddiv>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	e7b6      	b.n	8002b9e <pow+0x4a>
 8002c30:	f7ff ff5e 	bl	8002af0 <__errno>
 8002c34:	2322      	movs	r3, #34	; 0x22
 8002c36:	2200      	movs	r2, #0
 8002c38:	6003      	str	r3, [r0, #0]
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f7fd feb4 	bl	80009ac <__aeabi_dcmplt>
 8002c44:	2400      	movs	r4, #0
 8002c46:	b148      	cbz	r0, 8002c5c <pow+0x108>
 8002c48:	4630      	mov	r0, r6
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	f000 fe2e 	bl	80038ac <rint>
 8002c50:	4632      	mov	r2, r6
 8002c52:	463b      	mov	r3, r7
 8002c54:	f7fd fea0 	bl	8000998 <__aeabi_dcmpeq>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d0c4      	beq.n	8002be6 <pow+0x92>
 8002c5c:	4d11      	ldr	r5, [pc, #68]	; (8002ca4 <pow+0x150>)
 8002c5e:	e79e      	b.n	8002b9e <pow+0x4a>
 8002c60:	2200      	movs	r2, #0
 8002c62:	2300      	movs	r3, #0
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fe96 	bl	8000998 <__aeabi_dcmpeq>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d096      	beq.n	8002b9e <pow+0x4a>
 8002c70:	4640      	mov	r0, r8
 8002c72:	4649      	mov	r1, r9
 8002c74:	f000 fe0d 	bl	8003892 <finite>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d090      	beq.n	8002b9e <pow+0x4a>
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	4639      	mov	r1, r7
 8002c80:	f000 fe07 	bl	8003892 <finite>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d08a      	beq.n	8002b9e <pow+0x4a>
 8002c88:	f7ff ff32 	bl	8002af0 <__errno>
 8002c8c:	2322      	movs	r3, #34	; 0x22
 8002c8e:	2400      	movs	r4, #0
 8002c90:	2500      	movs	r5, #0
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	e783      	b.n	8002b9e <pow+0x4a>
 8002c96:	2400      	movs	r4, #0
 8002c98:	4d03      	ldr	r5, [pc, #12]	; (8002ca8 <pow+0x154>)
 8002c9a:	e780      	b.n	8002b9e <pow+0x4a>
 8002c9c:	20000074 	.word	0x20000074
 8002ca0:	fff00000 	.word	0xfff00000
 8002ca4:	7ff00000 	.word	0x7ff00000
 8002ca8:	3ff00000 	.word	0x3ff00000

08002cac <sqrt>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	4606      	mov	r6, r0
 8002cb0:	460f      	mov	r7, r1
 8002cb2:	f000 fd3f 	bl	8003734 <__ieee754_sqrt>
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <sqrt+0x54>)
 8002cb8:	4604      	mov	r4, r0
 8002cba:	f993 3000 	ldrsb.w	r3, [r3]
 8002cbe:	460d      	mov	r5, r1
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	d019      	beq.n	8002cf8 <sqrt+0x4c>
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	4630      	mov	r0, r6
 8002cca:	4639      	mov	r1, r7
 8002ccc:	f7fd fe96 	bl	80009fc <__aeabi_dcmpun>
 8002cd0:	b990      	cbnz	r0, 8002cf8 <sqrt+0x4c>
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	4639      	mov	r1, r7
 8002cda:	f7fd fe67 	bl	80009ac <__aeabi_dcmplt>
 8002cde:	b158      	cbz	r0, 8002cf8 <sqrt+0x4c>
 8002ce0:	f7ff ff06 	bl	8002af0 <__errno>
 8002ce4:	2321      	movs	r3, #33	; 0x21
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	6003      	str	r3, [r0, #0]
 8002cea:	2300      	movs	r3, #0
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd fd14 	bl	800071c <__aeabi_ddiv>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000074 	.word	0x20000074
 8002d04:	00000000 	.word	0x00000000

08002d08 <__ieee754_pow>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	b093      	sub	sp, #76	; 0x4c
 8002d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8002d16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002d1a:	ea55 0302 	orrs.w	r3, r5, r2
 8002d1e:	4607      	mov	r7, r0
 8002d20:	4688      	mov	r8, r1
 8002d22:	f000 84bf 	beq.w	80036a4 <__ieee754_pow+0x99c>
 8002d26:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <__ieee754_pow+0x218>)
 8002d28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	4689      	mov	r9, r1
 8002d30:	4682      	mov	sl, r0
 8002d32:	dc09      	bgt.n	8002d48 <__ieee754_pow+0x40>
 8002d34:	d103      	bne.n	8002d3e <__ieee754_pow+0x36>
 8002d36:	b978      	cbnz	r0, 8002d58 <__ieee754_pow+0x50>
 8002d38:	42a5      	cmp	r5, r4
 8002d3a:	dd02      	ble.n	8002d42 <__ieee754_pow+0x3a>
 8002d3c:	e00c      	b.n	8002d58 <__ieee754_pow+0x50>
 8002d3e:	429d      	cmp	r5, r3
 8002d40:	dc02      	bgt.n	8002d48 <__ieee754_pow+0x40>
 8002d42:	429d      	cmp	r5, r3
 8002d44:	d10e      	bne.n	8002d64 <__ieee754_pow+0x5c>
 8002d46:	b16a      	cbz	r2, 8002d64 <__ieee754_pow+0x5c>
 8002d48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002d4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002d50:	ea54 030a 	orrs.w	r3, r4, sl
 8002d54:	f000 84a6 	beq.w	80036a4 <__ieee754_pow+0x99c>
 8002d58:	4872      	ldr	r0, [pc, #456]	; (8002f24 <__ieee754_pow+0x21c>)
 8002d5a:	b013      	add	sp, #76	; 0x4c
 8002d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d60:	f000 bd9e 	b.w	80038a0 <nan>
 8002d64:	f1b9 0f00 	cmp.w	r9, #0
 8002d68:	da39      	bge.n	8002dde <__ieee754_pow+0xd6>
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <__ieee754_pow+0x220>)
 8002d6c:	429d      	cmp	r5, r3
 8002d6e:	dc54      	bgt.n	8002e1a <__ieee754_pow+0x112>
 8002d70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002d74:	429d      	cmp	r5, r3
 8002d76:	f340 84a6 	ble.w	80036c6 <__ieee754_pow+0x9be>
 8002d7a:	152b      	asrs	r3, r5, #20
 8002d7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d80:	2b14      	cmp	r3, #20
 8002d82:	dd0f      	ble.n	8002da4 <__ieee754_pow+0x9c>
 8002d84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002d88:	fa22 f103 	lsr.w	r1, r2, r3
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f040 8498 	bne.w	80036c6 <__ieee754_pow+0x9be>
 8002d96:	f001 0101 	and.w	r1, r1, #1
 8002d9a:	f1c1 0302 	rsb	r3, r1, #2
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	b182      	cbz	r2, 8002dc4 <__ieee754_pow+0xbc>
 8002da2:	e05e      	b.n	8002e62 <__ieee754_pow+0x15a>
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d15a      	bne.n	8002e5e <__ieee754_pow+0x156>
 8002da8:	f1c3 0314 	rsb	r3, r3, #20
 8002dac:	fa45 f103 	asr.w	r1, r5, r3
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	f040 8483 	bne.w	80036c0 <__ieee754_pow+0x9b8>
 8002dba:	f001 0101 	and.w	r1, r1, #1
 8002dbe:	f1c1 0302 	rsb	r3, r1, #2
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <__ieee754_pow+0x224>)
 8002dc6:	429d      	cmp	r5, r3
 8002dc8:	d130      	bne.n	8002e2c <__ieee754_pow+0x124>
 8002dca:	2e00      	cmp	r6, #0
 8002dcc:	f280 8474 	bge.w	80036b8 <__ieee754_pow+0x9b0>
 8002dd0:	463a      	mov	r2, r7
 8002dd2:	4643      	mov	r3, r8
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4955      	ldr	r1, [pc, #340]	; (8002f2c <__ieee754_pow+0x224>)
 8002dd8:	f7fd fca0 	bl	800071c <__aeabi_ddiv>
 8002ddc:	e02f      	b.n	8002e3e <__ieee754_pow+0x136>
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d13d      	bne.n	8002e62 <__ieee754_pow+0x15a>
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <__ieee754_pow+0x218>)
 8002de8:	429d      	cmp	r5, r3
 8002dea:	d1eb      	bne.n	8002dc4 <__ieee754_pow+0xbc>
 8002dec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002df0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002df4:	ea53 030a 	orrs.w	r3, r3, sl
 8002df8:	f000 8454 	beq.w	80036a4 <__ieee754_pow+0x99c>
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <__ieee754_pow+0x228>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	dd0d      	ble.n	8002e1e <__ieee754_pow+0x116>
 8002e02:	2e00      	cmp	r6, #0
 8002e04:	f280 8454 	bge.w	80036b0 <__ieee754_pow+0x9a8>
 8002e08:	f04f 0b00 	mov.w	fp, #0
 8002e0c:	f04f 0c00 	mov.w	ip, #0
 8002e10:	4658      	mov	r0, fp
 8002e12:	4661      	mov	r1, ip
 8002e14:	b013      	add	sp, #76	; 0x4c
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e7e0      	b.n	8002de0 <__ieee754_pow+0xd8>
 8002e1e:	2e00      	cmp	r6, #0
 8002e20:	daf2      	bge.n	8002e08 <__ieee754_pow+0x100>
 8002e22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002e26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002e2a:	e7f1      	b.n	8002e10 <__ieee754_pow+0x108>
 8002e2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8002e30:	d108      	bne.n	8002e44 <__ieee754_pow+0x13c>
 8002e32:	463a      	mov	r2, r7
 8002e34:	4643      	mov	r3, r8
 8002e36:	4638      	mov	r0, r7
 8002e38:	4641      	mov	r1, r8
 8002e3a:	f7fd fb45 	bl	80004c8 <__aeabi_dmul>
 8002e3e:	4683      	mov	fp, r0
 8002e40:	468c      	mov	ip, r1
 8002e42:	e7e5      	b.n	8002e10 <__ieee754_pow+0x108>
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <__ieee754_pow+0x22c>)
 8002e46:	429e      	cmp	r6, r3
 8002e48:	d10b      	bne.n	8002e62 <__ieee754_pow+0x15a>
 8002e4a:	f1b9 0f00 	cmp.w	r9, #0
 8002e4e:	db08      	blt.n	8002e62 <__ieee754_pow+0x15a>
 8002e50:	4638      	mov	r0, r7
 8002e52:	4641      	mov	r1, r8
 8002e54:	b013      	add	sp, #76	; 0x4c
 8002e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	f000 bc6b 	b.w	8003734 <__ieee754_sqrt>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4638      	mov	r0, r7
 8002e64:	4641      	mov	r1, r8
 8002e66:	f000 fd11 	bl	800388c <fabs>
 8002e6a:	4683      	mov	fp, r0
 8002e6c:	468c      	mov	ip, r1
 8002e6e:	f1ba 0f00 	cmp.w	sl, #0
 8002e72:	d129      	bne.n	8002ec8 <__ieee754_pow+0x1c0>
 8002e74:	b124      	cbz	r4, 8002e80 <__ieee754_pow+0x178>
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <__ieee754_pow+0x224>)
 8002e78:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d123      	bne.n	8002ec8 <__ieee754_pow+0x1c0>
 8002e80:	2e00      	cmp	r6, #0
 8002e82:	da07      	bge.n	8002e94 <__ieee754_pow+0x18c>
 8002e84:	465a      	mov	r2, fp
 8002e86:	4663      	mov	r3, ip
 8002e88:	2000      	movs	r0, #0
 8002e8a:	4928      	ldr	r1, [pc, #160]	; (8002f2c <__ieee754_pow+0x224>)
 8002e8c:	f7fd fc46 	bl	800071c <__aeabi_ddiv>
 8002e90:	4683      	mov	fp, r0
 8002e92:	468c      	mov	ip, r1
 8002e94:	f1b9 0f00 	cmp.w	r9, #0
 8002e98:	daba      	bge.n	8002e10 <__ieee754_pow+0x108>
 8002e9a:	9b00      	ldr	r3, [sp, #0]
 8002e9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002ea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002ea4:	4323      	orrs	r3, r4
 8002ea6:	d108      	bne.n	8002eba <__ieee754_pow+0x1b2>
 8002ea8:	465a      	mov	r2, fp
 8002eaa:	4663      	mov	r3, ip
 8002eac:	4658      	mov	r0, fp
 8002eae:	4661      	mov	r1, ip
 8002eb0:	f7fd f952 	bl	8000158 <__aeabi_dsub>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	e78e      	b.n	8002dd8 <__ieee754_pow+0xd0>
 8002eba:	9b00      	ldr	r3, [sp, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d1a7      	bne.n	8002e10 <__ieee754_pow+0x108>
 8002ec0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002ec4:	469c      	mov	ip, r3
 8002ec6:	e7a3      	b.n	8002e10 <__ieee754_pow+0x108>
 8002ec8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	930c      	str	r3, [sp, #48]	; 0x30
 8002ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ed2:	9b00      	ldr	r3, [sp, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	d104      	bne.n	8002ee2 <__ieee754_pow+0x1da>
 8002ed8:	463a      	mov	r2, r7
 8002eda:	4643      	mov	r3, r8
 8002edc:	4638      	mov	r0, r7
 8002ede:	4641      	mov	r1, r8
 8002ee0:	e7e6      	b.n	8002eb0 <__ieee754_pow+0x1a8>
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <__ieee754_pow+0x230>)
 8002ee4:	429d      	cmp	r5, r3
 8002ee6:	f340 80f9 	ble.w	80030dc <__ieee754_pow+0x3d4>
 8002eea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002eee:	429d      	cmp	r5, r3
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <__ieee754_pow+0x228>)
 8002ef2:	dd09      	ble.n	8002f08 <__ieee754_pow+0x200>
 8002ef4:	429c      	cmp	r4, r3
 8002ef6:	dc0c      	bgt.n	8002f12 <__ieee754_pow+0x20a>
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	da85      	bge.n	8002e08 <__ieee754_pow+0x100>
 8002efc:	a306      	add	r3, pc, #24	; (adr r3, 8002f18 <__ieee754_pow+0x210>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	e798      	b.n	8002e3a <__ieee754_pow+0x132>
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	dbf5      	blt.n	8002ef8 <__ieee754_pow+0x1f0>
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <__ieee754_pow+0x224>)
 8002f0e:	429c      	cmp	r4, r3
 8002f10:	dd14      	ble.n	8002f3c <__ieee754_pow+0x234>
 8002f12:	2e00      	cmp	r6, #0
 8002f14:	dcf2      	bgt.n	8002efc <__ieee754_pow+0x1f4>
 8002f16:	e777      	b.n	8002e08 <__ieee754_pow+0x100>
 8002f18:	8800759c 	.word	0x8800759c
 8002f1c:	7e37e43c 	.word	0x7e37e43c
 8002f20:	7ff00000 	.word	0x7ff00000
 8002f24:	08003b0a 	.word	0x08003b0a
 8002f28:	433fffff 	.word	0x433fffff
 8002f2c:	3ff00000 	.word	0x3ff00000
 8002f30:	3fefffff 	.word	0x3fefffff
 8002f34:	3fe00000 	.word	0x3fe00000
 8002f38:	41e00000 	.word	0x41e00000
 8002f3c:	4661      	mov	r1, ip
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4658      	mov	r0, fp
 8002f42:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <__ieee754_pow+0x3c0>)
 8002f44:	f7fd f908 	bl	8000158 <__aeabi_dsub>
 8002f48:	a355      	add	r3, pc, #340	; (adr r3, 80030a0 <__ieee754_pow+0x398>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	4604      	mov	r4, r0
 8002f50:	460d      	mov	r5, r1
 8002f52:	f7fd fab9 	bl	80004c8 <__aeabi_dmul>
 8002f56:	a354      	add	r3, pc, #336	; (adr r3, 80030a8 <__ieee754_pow+0x3a0>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	460f      	mov	r7, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd fab0 	bl	80004c8 <__aeabi_dmul>
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4682      	mov	sl, r0
 8002f6c:	468b      	mov	fp, r1
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	4b56      	ldr	r3, [pc, #344]	; (80030cc <__ieee754_pow+0x3c4>)
 8002f74:	f7fd faa8 	bl	80004c8 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	a14c      	add	r1, pc, #304	; (adr r1, 80030b0 <__ieee754_pow+0x3a8>)
 8002f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f82:	f7fd f8e9 	bl	8000158 <__aeabi_dsub>
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	f7fd fa9d 	bl	80004c8 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	2000      	movs	r0, #0
 8002f94:	494e      	ldr	r1, [pc, #312]	; (80030d0 <__ieee754_pow+0x3c8>)
 8002f96:	f7fd f8df 	bl	8000158 <__aeabi_dsub>
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	4680      	mov	r8, r0
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f7fd fa8f 	bl	80004c8 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f7fd fa89 	bl	80004c8 <__aeabi_dmul>
 8002fb6:	a340      	add	r3, pc, #256	; (adr r3, 80030b8 <__ieee754_pow+0x3b0>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fa84 	bl	80004c8 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4650      	mov	r0, sl
 8002fc6:	4659      	mov	r1, fp
 8002fc8:	f7fd f8c6 	bl	8000158 <__aeabi_dsub>
 8002fcc:	f04f 0a00 	mov.w	sl, #0
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	4630      	mov	r0, r6
 8002fda:	4639      	mov	r1, r7
 8002fdc:	f7fd f8be 	bl	800015c <__adddf3>
 8002fe0:	4632      	mov	r2, r6
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	4650      	mov	r0, sl
 8002fe6:	468b      	mov	fp, r1
 8002fe8:	f7fd f8b6 	bl	8000158 <__aeabi_dsub>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd f8b0 	bl	8000158 <__aeabi_dsub>
 8002ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002ffc:	9b00      	ldr	r3, [sp, #0]
 8002ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003000:	3b01      	subs	r3, #1
 8003002:	4313      	orrs	r3, r2
 8003004:	f04f 0600 	mov.w	r6, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	bf0c      	ite	eq
 800300e:	4b31      	ldreq	r3, [pc, #196]	; (80030d4 <__ieee754_pow+0x3cc>)
 8003010:	4b2d      	ldrne	r3, [pc, #180]	; (80030c8 <__ieee754_pow+0x3c0>)
 8003012:	4604      	mov	r4, r0
 8003014:	460d      	mov	r5, r1
 8003016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800301a:	e9cd 2300 	strd	r2, r3, [sp]
 800301e:	4632      	mov	r2, r6
 8003020:	463b      	mov	r3, r7
 8003022:	f7fd f899 	bl	8000158 <__aeabi_dsub>
 8003026:	4652      	mov	r2, sl
 8003028:	465b      	mov	r3, fp
 800302a:	f7fd fa4d 	bl	80004c8 <__aeabi_dmul>
 800302e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003032:	4680      	mov	r8, r0
 8003034:	4689      	mov	r9, r1
 8003036:	4620      	mov	r0, r4
 8003038:	4629      	mov	r1, r5
 800303a:	f7fd fa45 	bl	80004c8 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4640      	mov	r0, r8
 8003044:	4649      	mov	r1, r9
 8003046:	f7fd f889 	bl	800015c <__adddf3>
 800304a:	4632      	mov	r2, r6
 800304c:	463b      	mov	r3, r7
 800304e:	4680      	mov	r8, r0
 8003050:	4689      	mov	r9, r1
 8003052:	4650      	mov	r0, sl
 8003054:	4659      	mov	r1, fp
 8003056:	f7fd fa37 	bl	80004c8 <__aeabi_dmul>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	460b      	mov	r3, r1
 8003060:	4602      	mov	r2, r0
 8003062:	4649      	mov	r1, r9
 8003064:	4640      	mov	r0, r8
 8003066:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800306a:	f7fd f877 	bl	800015c <__adddf3>
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <__ieee754_pow+0x3d0>)
 8003070:	4682      	mov	sl, r0
 8003072:	4299      	cmp	r1, r3
 8003074:	460f      	mov	r7, r1
 8003076:	460e      	mov	r6, r1
 8003078:	f340 82ed 	ble.w	8003656 <__ieee754_pow+0x94e>
 800307c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003080:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003084:	4303      	orrs	r3, r0
 8003086:	f000 81e7 	beq.w	8003458 <__ieee754_pow+0x750>
 800308a:	a30d      	add	r3, pc, #52	; (adr r3, 80030c0 <__ieee754_pow+0x3b8>)
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003094:	f7fd fa18 	bl	80004c8 <__aeabi_dmul>
 8003098:	a309      	add	r3, pc, #36	; (adr r3, 80030c0 <__ieee754_pow+0x3b8>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	e6cc      	b.n	8002e3a <__ieee754_pow+0x132>
 80030a0:	60000000 	.word	0x60000000
 80030a4:	3ff71547 	.word	0x3ff71547
 80030a8:	f85ddf44 	.word	0xf85ddf44
 80030ac:	3e54ae0b 	.word	0x3e54ae0b
 80030b0:	55555555 	.word	0x55555555
 80030b4:	3fd55555 	.word	0x3fd55555
 80030b8:	652b82fe 	.word	0x652b82fe
 80030bc:	3ff71547 	.word	0x3ff71547
 80030c0:	8800759c 	.word	0x8800759c
 80030c4:	7e37e43c 	.word	0x7e37e43c
 80030c8:	3ff00000 	.word	0x3ff00000
 80030cc:	3fd00000 	.word	0x3fd00000
 80030d0:	3fe00000 	.word	0x3fe00000
 80030d4:	bff00000 	.word	0xbff00000
 80030d8:	408fffff 	.word	0x408fffff
 80030dc:	4bd4      	ldr	r3, [pc, #848]	; (8003430 <__ieee754_pow+0x728>)
 80030de:	2200      	movs	r2, #0
 80030e0:	ea09 0303 	and.w	r3, r9, r3
 80030e4:	b943      	cbnz	r3, 80030f8 <__ieee754_pow+0x3f0>
 80030e6:	4658      	mov	r0, fp
 80030e8:	4661      	mov	r1, ip
 80030ea:	4bd2      	ldr	r3, [pc, #840]	; (8003434 <__ieee754_pow+0x72c>)
 80030ec:	f7fd f9ec 	bl	80004c8 <__aeabi_dmul>
 80030f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80030f4:	4683      	mov	fp, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	1523      	asrs	r3, r4, #20
 80030fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80030fe:	4413      	add	r3, r2
 8003100:	930b      	str	r3, [sp, #44]	; 0x2c
 8003102:	4bcd      	ldr	r3, [pc, #820]	; (8003438 <__ieee754_pow+0x730>)
 8003104:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003108:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800310c:	429c      	cmp	r4, r3
 800310e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003112:	dd08      	ble.n	8003126 <__ieee754_pow+0x41e>
 8003114:	4bc9      	ldr	r3, [pc, #804]	; (800343c <__ieee754_pow+0x734>)
 8003116:	429c      	cmp	r4, r3
 8003118:	f340 819c 	ble.w	8003454 <__ieee754_pow+0x74c>
 800311c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800311e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003122:	3301      	adds	r3, #1
 8003124:	930b      	str	r3, [sp, #44]	; 0x2c
 8003126:	2600      	movs	r6, #0
 8003128:	00f3      	lsls	r3, r6, #3
 800312a:	930d      	str	r3, [sp, #52]	; 0x34
 800312c:	4bc4      	ldr	r3, [pc, #784]	; (8003440 <__ieee754_pow+0x738>)
 800312e:	4658      	mov	r0, fp
 8003130:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003134:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003138:	4629      	mov	r1, r5
 800313a:	461a      	mov	r2, r3
 800313c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003140:	4623      	mov	r3, r4
 8003142:	f7fd f809 	bl	8000158 <__aeabi_dsub>
 8003146:	46da      	mov	sl, fp
 8003148:	462b      	mov	r3, r5
 800314a:	4652      	mov	r2, sl
 800314c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003154:	f7fd f802 	bl	800015c <__adddf3>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	2000      	movs	r0, #0
 800315e:	49b9      	ldr	r1, [pc, #740]	; (8003444 <__ieee754_pow+0x73c>)
 8003160:	f7fd fadc 	bl	800071c <__aeabi_ddiv>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800316c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003170:	f7fd f9aa 	bl	80004c8 <__aeabi_dmul>
 8003174:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003178:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800317c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003180:	2300      	movs	r3, #0
 8003182:	2200      	movs	r2, #0
 8003184:	46ab      	mov	fp, r5
 8003186:	106d      	asrs	r5, r5, #1
 8003188:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003192:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003196:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800319a:	4640      	mov	r0, r8
 800319c:	4649      	mov	r1, r9
 800319e:	4614      	mov	r4, r2
 80031a0:	461d      	mov	r5, r3
 80031a2:	f7fd f991 	bl	80004c8 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80031ae:	f7fc ffd3 	bl	8000158 <__aeabi_dsub>
 80031b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031b6:	4606      	mov	r6, r0
 80031b8:	460f      	mov	r7, r1
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fc ffcb 	bl	8000158 <__aeabi_dsub>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4650      	mov	r0, sl
 80031c8:	4659      	mov	r1, fp
 80031ca:	f7fc ffc5 	bl	8000158 <__aeabi_dsub>
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	f7fd f979 	bl	80004c8 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4630      	mov	r0, r6
 80031dc:	4639      	mov	r1, r7
 80031de:	f7fc ffbb 	bl	8000158 <__aeabi_dsub>
 80031e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80031e6:	f7fd f96f 	bl	80004c8 <__aeabi_dmul>
 80031ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd f967 	bl	80004c8 <__aeabi_dmul>
 80031fa:	a37b      	add	r3, pc, #492	; (adr r3, 80033e8 <__ieee754_pow+0x6e0>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	f7fd f960 	bl	80004c8 <__aeabi_dmul>
 8003208:	a379      	add	r3, pc, #484	; (adr r3, 80033f0 <__ieee754_pow+0x6e8>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fc ffa5 	bl	800015c <__adddf3>
 8003212:	4622      	mov	r2, r4
 8003214:	462b      	mov	r3, r5
 8003216:	f7fd f957 	bl	80004c8 <__aeabi_dmul>
 800321a:	a377      	add	r3, pc, #476	; (adr r3, 80033f8 <__ieee754_pow+0x6f0>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fc ff9c 	bl	800015c <__adddf3>
 8003224:	4622      	mov	r2, r4
 8003226:	462b      	mov	r3, r5
 8003228:	f7fd f94e 	bl	80004c8 <__aeabi_dmul>
 800322c:	a374      	add	r3, pc, #464	; (adr r3, 8003400 <__ieee754_pow+0x6f8>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f7fc ff93 	bl	800015c <__adddf3>
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	f7fd f945 	bl	80004c8 <__aeabi_dmul>
 800323e:	a372      	add	r3, pc, #456	; (adr r3, 8003408 <__ieee754_pow+0x700>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fc ff8a 	bl	800015c <__adddf3>
 8003248:	4622      	mov	r2, r4
 800324a:	462b      	mov	r3, r5
 800324c:	f7fd f93c 	bl	80004c8 <__aeabi_dmul>
 8003250:	a36f      	add	r3, pc, #444	; (adr r3, 8003410 <__ieee754_pow+0x708>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fc ff81 	bl	800015c <__adddf3>
 800325a:	4622      	mov	r2, r4
 800325c:	4606      	mov	r6, r0
 800325e:	460f      	mov	r7, r1
 8003260:	462b      	mov	r3, r5
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fd f92f 	bl	80004c8 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4630      	mov	r0, r6
 8003270:	4639      	mov	r1, r7
 8003272:	f7fd f929 	bl	80004c8 <__aeabi_dmul>
 8003276:	4604      	mov	r4, r0
 8003278:	460d      	mov	r5, r1
 800327a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800327e:	4642      	mov	r2, r8
 8003280:	464b      	mov	r3, r9
 8003282:	f7fc ff6b 	bl	800015c <__adddf3>
 8003286:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800328a:	f7fd f91d 	bl	80004c8 <__aeabi_dmul>
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	f7fc ff63 	bl	800015c <__adddf3>
 8003296:	4642      	mov	r2, r8
 8003298:	4606      	mov	r6, r0
 800329a:	460f      	mov	r7, r1
 800329c:	464b      	mov	r3, r9
 800329e:	4640      	mov	r0, r8
 80032a0:	4649      	mov	r1, r9
 80032a2:	f7fd f911 	bl	80004c8 <__aeabi_dmul>
 80032a6:	2200      	movs	r2, #0
 80032a8:	4b67      	ldr	r3, [pc, #412]	; (8003448 <__ieee754_pow+0x740>)
 80032aa:	4682      	mov	sl, r0
 80032ac:	468b      	mov	fp, r1
 80032ae:	f7fc ff55 	bl	800015c <__adddf3>
 80032b2:	4632      	mov	r2, r6
 80032b4:	463b      	mov	r3, r7
 80032b6:	f7fc ff51 	bl	800015c <__adddf3>
 80032ba:	9c04      	ldr	r4, [sp, #16]
 80032bc:	460d      	mov	r5, r1
 80032be:	4622      	mov	r2, r4
 80032c0:	460b      	mov	r3, r1
 80032c2:	4640      	mov	r0, r8
 80032c4:	4649      	mov	r1, r9
 80032c6:	f7fd f8ff 	bl	80004c8 <__aeabi_dmul>
 80032ca:	2200      	movs	r2, #0
 80032cc:	4680      	mov	r8, r0
 80032ce:	4689      	mov	r9, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	4b5c      	ldr	r3, [pc, #368]	; (8003448 <__ieee754_pow+0x740>)
 80032d6:	f7fc ff3f 	bl	8000158 <__aeabi_dsub>
 80032da:	4652      	mov	r2, sl
 80032dc:	465b      	mov	r3, fp
 80032de:	f7fc ff3b 	bl	8000158 <__aeabi_dsub>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4630      	mov	r0, r6
 80032e8:	4639      	mov	r1, r7
 80032ea:	f7fc ff35 	bl	8000158 <__aeabi_dsub>
 80032ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032f2:	f7fd f8e9 	bl	80004c8 <__aeabi_dmul>
 80032f6:	4622      	mov	r2, r4
 80032f8:	4606      	mov	r6, r0
 80032fa:	460f      	mov	r7, r1
 80032fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003300:	462b      	mov	r3, r5
 8003302:	f7fd f8e1 	bl	80004c8 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4630      	mov	r0, r6
 800330c:	4639      	mov	r1, r7
 800330e:	f7fc ff25 	bl	800015c <__adddf3>
 8003312:	4606      	mov	r6, r0
 8003314:	460f      	mov	r7, r1
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f7fc ff1d 	bl	800015c <__adddf3>
 8003322:	a33d      	add	r3, pc, #244	; (adr r3, 8003418 <__ieee754_pow+0x710>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	9c04      	ldr	r4, [sp, #16]
 800332a:	460d      	mov	r5, r1
 800332c:	4620      	mov	r0, r4
 800332e:	f7fd f8cb 	bl	80004c8 <__aeabi_dmul>
 8003332:	4642      	mov	r2, r8
 8003334:	464b      	mov	r3, r9
 8003336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	f7fc ff0b 	bl	8000158 <__aeabi_dsub>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4630      	mov	r0, r6
 8003348:	4639      	mov	r1, r7
 800334a:	f7fc ff05 	bl	8000158 <__aeabi_dsub>
 800334e:	a334      	add	r3, pc, #208	; (adr r3, 8003420 <__ieee754_pow+0x718>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd f8b8 	bl	80004c8 <__aeabi_dmul>
 8003358:	a333      	add	r3, pc, #204	; (adr r3, 8003428 <__ieee754_pow+0x720>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	4606      	mov	r6, r0
 8003360:	460f      	mov	r7, r1
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	f7fd f8af 	bl	80004c8 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4630      	mov	r0, r6
 8003370:	4639      	mov	r1, r7
 8003372:	f7fc fef3 	bl	800015c <__adddf3>
 8003376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <__ieee754_pow+0x744>)
 800337a:	4413      	add	r3, r2
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f7fc feec 	bl	800015c <__adddf3>
 8003384:	4680      	mov	r8, r0
 8003386:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003388:	4689      	mov	r9, r1
 800338a:	f7fd f833 	bl	80003f4 <__aeabi_i2d>
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
 8003392:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <__ieee754_pow+0x748>)
 8003396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800339a:	4413      	add	r3, r2
 800339c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	f7fc feda 	bl	800015c <__adddf3>
 80033a8:	4632      	mov	r2, r6
 80033aa:	463b      	mov	r3, r7
 80033ac:	f7fc fed6 	bl	800015c <__adddf3>
 80033b0:	4622      	mov	r2, r4
 80033b2:	462b      	mov	r3, r5
 80033b4:	f7fc fed2 	bl	800015c <__adddf3>
 80033b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80033bc:	4622      	mov	r2, r4
 80033be:	462b      	mov	r3, r5
 80033c0:	4650      	mov	r0, sl
 80033c2:	468b      	mov	fp, r1
 80033c4:	f7fc fec8 	bl	8000158 <__aeabi_dsub>
 80033c8:	4632      	mov	r2, r6
 80033ca:	463b      	mov	r3, r7
 80033cc:	f7fc fec4 	bl	8000158 <__aeabi_dsub>
 80033d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033d4:	f7fc fec0 	bl	8000158 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4640      	mov	r0, r8
 80033de:	4649      	mov	r1, r9
 80033e0:	e608      	b.n	8002ff4 <__ieee754_pow+0x2ec>
 80033e2:	bf00      	nop
 80033e4:	f3af 8000 	nop.w
 80033e8:	4a454eef 	.word	0x4a454eef
 80033ec:	3fca7e28 	.word	0x3fca7e28
 80033f0:	93c9db65 	.word	0x93c9db65
 80033f4:	3fcd864a 	.word	0x3fcd864a
 80033f8:	a91d4101 	.word	0xa91d4101
 80033fc:	3fd17460 	.word	0x3fd17460
 8003400:	518f264d 	.word	0x518f264d
 8003404:	3fd55555 	.word	0x3fd55555
 8003408:	db6fabff 	.word	0xdb6fabff
 800340c:	3fdb6db6 	.word	0x3fdb6db6
 8003410:	33333303 	.word	0x33333303
 8003414:	3fe33333 	.word	0x3fe33333
 8003418:	e0000000 	.word	0xe0000000
 800341c:	3feec709 	.word	0x3feec709
 8003420:	dc3a03fd 	.word	0xdc3a03fd
 8003424:	3feec709 	.word	0x3feec709
 8003428:	145b01f5 	.word	0x145b01f5
 800342c:	be3e2fe0 	.word	0xbe3e2fe0
 8003430:	7ff00000 	.word	0x7ff00000
 8003434:	43400000 	.word	0x43400000
 8003438:	0003988e 	.word	0x0003988e
 800343c:	000bb679 	.word	0x000bb679
 8003440:	08003b10 	.word	0x08003b10
 8003444:	3ff00000 	.word	0x3ff00000
 8003448:	40080000 	.word	0x40080000
 800344c:	08003b30 	.word	0x08003b30
 8003450:	08003b20 	.word	0x08003b20
 8003454:	2601      	movs	r6, #1
 8003456:	e667      	b.n	8003128 <__ieee754_pow+0x420>
 8003458:	a39d      	add	r3, pc, #628	; (adr r3, 80036d0 <__ieee754_pow+0x9c8>)
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	4640      	mov	r0, r8
 8003460:	4649      	mov	r1, r9
 8003462:	f7fc fe7b 	bl	800015c <__adddf3>
 8003466:	4622      	mov	r2, r4
 8003468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800346c:	462b      	mov	r3, r5
 800346e:	4650      	mov	r0, sl
 8003470:	4639      	mov	r1, r7
 8003472:	f7fc fe71 	bl	8000158 <__aeabi_dsub>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800347e:	f7fd fab3 	bl	80009e8 <__aeabi_dcmpgt>
 8003482:	2800      	cmp	r0, #0
 8003484:	f47f ae01 	bne.w	800308a <__ieee754_pow+0x382>
 8003488:	4aa5      	ldr	r2, [pc, #660]	; (8003720 <__ieee754_pow+0xa18>)
 800348a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800348e:	4293      	cmp	r3, r2
 8003490:	f340 8103 	ble.w	800369a <__ieee754_pow+0x992>
 8003494:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003498:	2000      	movs	r0, #0
 800349a:	151b      	asrs	r3, r3, #20
 800349c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80034a0:	fa4a f303 	asr.w	r3, sl, r3
 80034a4:	4433      	add	r3, r6
 80034a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80034aa:	4f9e      	ldr	r7, [pc, #632]	; (8003724 <__ieee754_pow+0xa1c>)
 80034ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80034b0:	4117      	asrs	r7, r2
 80034b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80034b6:	ea23 0107 	bic.w	r1, r3, r7
 80034ba:	f1c2 0214 	rsb	r2, r2, #20
 80034be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80034c2:	460b      	mov	r3, r1
 80034c4:	fa4a fa02 	asr.w	sl, sl, r2
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	4602      	mov	r2, r0
 80034cc:	4629      	mov	r1, r5
 80034ce:	4620      	mov	r0, r4
 80034d0:	bfb8      	it	lt
 80034d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80034d6:	f7fc fe3f 	bl	8000158 <__aeabi_dsub>
 80034da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e2:	2400      	movs	r4, #0
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f7fc fe38 	bl	800015c <__adddf3>
 80034ec:	a37a      	add	r3, pc, #488	; (adr r3, 80036d8 <__ieee754_pow+0x9d0>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	4620      	mov	r0, r4
 80034f4:	460d      	mov	r5, r1
 80034f6:	f7fc ffe7 	bl	80004c8 <__aeabi_dmul>
 80034fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034fe:	4606      	mov	r6, r0
 8003500:	460f      	mov	r7, r1
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f7fc fe27 	bl	8000158 <__aeabi_dsub>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f7fc fe21 	bl	8000158 <__aeabi_dsub>
 8003516:	a372      	add	r3, pc, #456	; (adr r3, 80036e0 <__ieee754_pow+0x9d8>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fc ffd4 	bl	80004c8 <__aeabi_dmul>
 8003520:	a371      	add	r3, pc, #452	; (adr r3, 80036e8 <__ieee754_pow+0x9e0>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	4680      	mov	r8, r0
 8003528:	4689      	mov	r9, r1
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	f7fc ffcb 	bl	80004c8 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4640      	mov	r0, r8
 8003538:	4649      	mov	r1, r9
 800353a:	f7fc fe0f 	bl	800015c <__adddf3>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4630      	mov	r0, r6
 8003548:	4639      	mov	r1, r7
 800354a:	f7fc fe07 	bl	800015c <__adddf3>
 800354e:	4632      	mov	r2, r6
 8003550:	463b      	mov	r3, r7
 8003552:	4680      	mov	r8, r0
 8003554:	4689      	mov	r9, r1
 8003556:	f7fc fdff 	bl	8000158 <__aeabi_dsub>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fc fdf9 	bl	8000158 <__aeabi_dsub>
 8003566:	4642      	mov	r2, r8
 8003568:	4606      	mov	r6, r0
 800356a:	460f      	mov	r7, r1
 800356c:	464b      	mov	r3, r9
 800356e:	4640      	mov	r0, r8
 8003570:	4649      	mov	r1, r9
 8003572:	f7fc ffa9 	bl	80004c8 <__aeabi_dmul>
 8003576:	a35e      	add	r3, pc, #376	; (adr r3, 80036f0 <__ieee754_pow+0x9e8>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
 8003580:	f7fc ffa2 	bl	80004c8 <__aeabi_dmul>
 8003584:	a35c      	add	r3, pc, #368	; (adr r3, 80036f8 <__ieee754_pow+0x9f0>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fde5 	bl	8000158 <__aeabi_dsub>
 800358e:	4622      	mov	r2, r4
 8003590:	462b      	mov	r3, r5
 8003592:	f7fc ff99 	bl	80004c8 <__aeabi_dmul>
 8003596:	a35a      	add	r3, pc, #360	; (adr r3, 8003700 <__ieee754_pow+0x9f8>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fc fdde 	bl	800015c <__adddf3>
 80035a0:	4622      	mov	r2, r4
 80035a2:	462b      	mov	r3, r5
 80035a4:	f7fc ff90 	bl	80004c8 <__aeabi_dmul>
 80035a8:	a357      	add	r3, pc, #348	; (adr r3, 8003708 <__ieee754_pow+0xa00>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f7fc fdd3 	bl	8000158 <__aeabi_dsub>
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	f7fc ff87 	bl	80004c8 <__aeabi_dmul>
 80035ba:	a355      	add	r3, pc, #340	; (adr r3, 8003710 <__ieee754_pow+0xa08>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fc fdcc 	bl	800015c <__adddf3>
 80035c4:	4622      	mov	r2, r4
 80035c6:	462b      	mov	r3, r5
 80035c8:	f7fc ff7e 	bl	80004c8 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4640      	mov	r0, r8
 80035d2:	4649      	mov	r1, r9
 80035d4:	f7fc fdc0 	bl	8000158 <__aeabi_dsub>
 80035d8:	4604      	mov	r4, r0
 80035da:	460d      	mov	r5, r1
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fc ff70 	bl	80004c8 <__aeabi_dmul>
 80035e8:	2200      	movs	r2, #0
 80035ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fc fdaf 	bl	8000158 <__aeabi_dsub>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003602:	f7fd f88b 	bl	800071c <__aeabi_ddiv>
 8003606:	4632      	mov	r2, r6
 8003608:	4604      	mov	r4, r0
 800360a:	460d      	mov	r5, r1
 800360c:	463b      	mov	r3, r7
 800360e:	4640      	mov	r0, r8
 8003610:	4649      	mov	r1, r9
 8003612:	f7fc ff59 	bl	80004c8 <__aeabi_dmul>
 8003616:	4632      	mov	r2, r6
 8003618:	463b      	mov	r3, r7
 800361a:	f7fc fd9f 	bl	800015c <__adddf3>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc fd97 	bl	8000158 <__aeabi_dsub>
 800362a:	4642      	mov	r2, r8
 800362c:	464b      	mov	r3, r9
 800362e:	f7fc fd93 	bl	8000158 <__aeabi_dsub>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	2000      	movs	r0, #0
 8003638:	493b      	ldr	r1, [pc, #236]	; (8003728 <__ieee754_pow+0xa20>)
 800363a:	f7fc fd8d 	bl	8000158 <__aeabi_dsub>
 800363e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003642:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003646:	da2b      	bge.n	80036a0 <__ieee754_pow+0x998>
 8003648:	4652      	mov	r2, sl
 800364a:	f000 f9b9 	bl	80039c0 <scalbn>
 800364e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003652:	f7ff bbf2 	b.w	8002e3a <__ieee754_pow+0x132>
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <__ieee754_pow+0xa24>)
 8003658:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800365c:	429f      	cmp	r7, r3
 800365e:	f77f af13 	ble.w	8003488 <__ieee754_pow+0x780>
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <__ieee754_pow+0xa28>)
 8003664:	440b      	add	r3, r1
 8003666:	4303      	orrs	r3, r0
 8003668:	d00b      	beq.n	8003682 <__ieee754_pow+0x97a>
 800366a:	a32b      	add	r3, pc, #172	; (adr r3, 8003718 <__ieee754_pow+0xa10>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003674:	f7fc ff28 	bl	80004c8 <__aeabi_dmul>
 8003678:	a327      	add	r3, pc, #156	; (adr r3, 8003718 <__ieee754_pow+0xa10>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7ff bbdc 	b.w	8002e3a <__ieee754_pow+0x132>
 8003682:	4622      	mov	r2, r4
 8003684:	462b      	mov	r3, r5
 8003686:	f7fc fd67 	bl	8000158 <__aeabi_dsub>
 800368a:	4642      	mov	r2, r8
 800368c:	464b      	mov	r3, r9
 800368e:	f7fd f9a1 	bl	80009d4 <__aeabi_dcmpge>
 8003692:	2800      	cmp	r0, #0
 8003694:	f43f aef8 	beq.w	8003488 <__ieee754_pow+0x780>
 8003698:	e7e7      	b.n	800366a <__ieee754_pow+0x962>
 800369a:	f04f 0a00 	mov.w	sl, #0
 800369e:	e71e      	b.n	80034de <__ieee754_pow+0x7d6>
 80036a0:	4621      	mov	r1, r4
 80036a2:	e7d4      	b.n	800364e <__ieee754_pow+0x946>
 80036a4:	f04f 0b00 	mov.w	fp, #0
 80036a8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003728 <__ieee754_pow+0xa20>
 80036ac:	f7ff bbb0 	b.w	8002e10 <__ieee754_pow+0x108>
 80036b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80036b4:	f7ff bbac 	b.w	8002e10 <__ieee754_pow+0x108>
 80036b8:	4638      	mov	r0, r7
 80036ba:	4641      	mov	r1, r8
 80036bc:	f7ff bbbf 	b.w	8002e3e <__ieee754_pow+0x136>
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	f7ff bb7f 	b.w	8002dc4 <__ieee754_pow+0xbc>
 80036c6:	2300      	movs	r3, #0
 80036c8:	f7ff bb69 	b.w	8002d9e <__ieee754_pow+0x96>
 80036cc:	f3af 8000 	nop.w
 80036d0:	652b82fe 	.word	0x652b82fe
 80036d4:	3c971547 	.word	0x3c971547
 80036d8:	00000000 	.word	0x00000000
 80036dc:	3fe62e43 	.word	0x3fe62e43
 80036e0:	fefa39ef 	.word	0xfefa39ef
 80036e4:	3fe62e42 	.word	0x3fe62e42
 80036e8:	0ca86c39 	.word	0x0ca86c39
 80036ec:	be205c61 	.word	0xbe205c61
 80036f0:	72bea4d0 	.word	0x72bea4d0
 80036f4:	3e663769 	.word	0x3e663769
 80036f8:	c5d26bf1 	.word	0xc5d26bf1
 80036fc:	3ebbbd41 	.word	0x3ebbbd41
 8003700:	af25de2c 	.word	0xaf25de2c
 8003704:	3f11566a 	.word	0x3f11566a
 8003708:	16bebd93 	.word	0x16bebd93
 800370c:	3f66c16c 	.word	0x3f66c16c
 8003710:	5555553e 	.word	0x5555553e
 8003714:	3fc55555 	.word	0x3fc55555
 8003718:	c2f8f359 	.word	0xc2f8f359
 800371c:	01a56e1f 	.word	0x01a56e1f
 8003720:	3fe00000 	.word	0x3fe00000
 8003724:	000fffff 	.word	0x000fffff
 8003728:	3ff00000 	.word	0x3ff00000
 800372c:	4090cbff 	.word	0x4090cbff
 8003730:	3f6f3400 	.word	0x3f6f3400

08003734 <__ieee754_sqrt>:
 8003734:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003888 <__ieee754_sqrt+0x154>
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003740:	460b      	mov	r3, r1
 8003742:	4606      	mov	r6, r0
 8003744:	460d      	mov	r5, r1
 8003746:	460a      	mov	r2, r1
 8003748:	4607      	mov	r7, r0
 800374a:	4604      	mov	r4, r0
 800374c:	d10e      	bne.n	800376c <__ieee754_sqrt+0x38>
 800374e:	4602      	mov	r2, r0
 8003750:	f7fc feba 	bl	80004c8 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4630      	mov	r0, r6
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc fcfe 	bl	800015c <__adddf3>
 8003760:	4606      	mov	r6, r0
 8003762:	460d      	mov	r5, r1
 8003764:	4630      	mov	r0, r6
 8003766:	4629      	mov	r1, r5
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	2900      	cmp	r1, #0
 800376e:	dc0d      	bgt.n	800378c <__ieee754_sqrt+0x58>
 8003770:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003774:	ea5c 0707 	orrs.w	r7, ip, r7
 8003778:	d0f4      	beq.n	8003764 <__ieee754_sqrt+0x30>
 800377a:	b139      	cbz	r1, 800378c <__ieee754_sqrt+0x58>
 800377c:	4602      	mov	r2, r0
 800377e:	f7fc fceb 	bl	8000158 <__aeabi_dsub>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	f7fc ffc9 	bl	800071c <__aeabi_ddiv>
 800378a:	e7e9      	b.n	8003760 <__ieee754_sqrt+0x2c>
 800378c:	1512      	asrs	r2, r2, #20
 800378e:	d074      	beq.n	800387a <__ieee754_sqrt+0x146>
 8003790:	2000      	movs	r0, #0
 8003792:	07d5      	lsls	r5, r2, #31
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800379c:	bf5e      	ittt	pl
 800379e:	0fe3      	lsrpl	r3, r4, #31
 80037a0:	0064      	lslpl	r4, r4, #1
 80037a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80037a6:	0fe3      	lsrs	r3, r4, #31
 80037a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80037ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80037b0:	2516      	movs	r5, #22
 80037b2:	4601      	mov	r1, r0
 80037b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037b8:	1076      	asrs	r6, r6, #1
 80037ba:	0064      	lsls	r4, r4, #1
 80037bc:	188f      	adds	r7, r1, r2
 80037be:	429f      	cmp	r7, r3
 80037c0:	bfde      	ittt	le
 80037c2:	1bdb      	suble	r3, r3, r7
 80037c4:	18b9      	addle	r1, r7, r2
 80037c6:	1880      	addle	r0, r0, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	3d01      	subs	r5, #1
 80037cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80037d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80037d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80037d8:	d1f0      	bne.n	80037bc <__ieee754_sqrt+0x88>
 80037da:	462a      	mov	r2, r5
 80037dc:	f04f 0e20 	mov.w	lr, #32
 80037e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80037e4:	428b      	cmp	r3, r1
 80037e6:	eb07 0c05 	add.w	ip, r7, r5
 80037ea:	dc02      	bgt.n	80037f2 <__ieee754_sqrt+0xbe>
 80037ec:	d113      	bne.n	8003816 <__ieee754_sqrt+0xe2>
 80037ee:	45a4      	cmp	ip, r4
 80037f0:	d811      	bhi.n	8003816 <__ieee754_sqrt+0xe2>
 80037f2:	f1bc 0f00 	cmp.w	ip, #0
 80037f6:	eb0c 0507 	add.w	r5, ip, r7
 80037fa:	da43      	bge.n	8003884 <__ieee754_sqrt+0x150>
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	db41      	blt.n	8003884 <__ieee754_sqrt+0x150>
 8003800:	f101 0801 	add.w	r8, r1, #1
 8003804:	1a5b      	subs	r3, r3, r1
 8003806:	4641      	mov	r1, r8
 8003808:	45a4      	cmp	ip, r4
 800380a:	bf88      	it	hi
 800380c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003810:	eba4 040c 	sub.w	r4, r4, ip
 8003814:	443a      	add	r2, r7
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	f1be 0e01 	subs.w	lr, lr, #1
 800381c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003820:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003824:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003828:	d1dc      	bne.n	80037e4 <__ieee754_sqrt+0xb0>
 800382a:	4323      	orrs	r3, r4
 800382c:	d006      	beq.n	800383c <__ieee754_sqrt+0x108>
 800382e:	1c54      	adds	r4, r2, #1
 8003830:	bf0b      	itete	eq
 8003832:	4672      	moveq	r2, lr
 8003834:	3201      	addne	r2, #1
 8003836:	3001      	addeq	r0, #1
 8003838:	f022 0201 	bicne.w	r2, r2, #1
 800383c:	1043      	asrs	r3, r0, #1
 800383e:	07c1      	lsls	r1, r0, #31
 8003840:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003844:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800384c:	bf48      	it	mi
 800384e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003852:	4610      	mov	r0, r2
 8003854:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003858:	e782      	b.n	8003760 <__ieee754_sqrt+0x2c>
 800385a:	0ae3      	lsrs	r3, r4, #11
 800385c:	3915      	subs	r1, #21
 800385e:	0564      	lsls	r4, r4, #21
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0fa      	beq.n	800385a <__ieee754_sqrt+0x126>
 8003864:	02de      	lsls	r6, r3, #11
 8003866:	d50a      	bpl.n	800387e <__ieee754_sqrt+0x14a>
 8003868:	f1c2 0020 	rsb	r0, r2, #32
 800386c:	fa24 f000 	lsr.w	r0, r4, r0
 8003870:	1e55      	subs	r5, r2, #1
 8003872:	4094      	lsls	r4, r2
 8003874:	4303      	orrs	r3, r0
 8003876:	1b4a      	subs	r2, r1, r5
 8003878:	e78a      	b.n	8003790 <__ieee754_sqrt+0x5c>
 800387a:	4611      	mov	r1, r2
 800387c:	e7f0      	b.n	8003860 <__ieee754_sqrt+0x12c>
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	3201      	adds	r2, #1
 8003882:	e7ef      	b.n	8003864 <__ieee754_sqrt+0x130>
 8003884:	4688      	mov	r8, r1
 8003886:	e7bd      	b.n	8003804 <__ieee754_sqrt+0xd0>
 8003888:	7ff00000 	.word	0x7ff00000

0800388c <fabs>:
 800388c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003890:	4770      	bx	lr

08003892 <finite>:
 8003892:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003896:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800389a:	0fc0      	lsrs	r0, r0, #31
 800389c:	4770      	bx	lr
	...

080038a0 <nan>:
 80038a0:	2000      	movs	r0, #0
 80038a2:	4901      	ldr	r1, [pc, #4]	; (80038a8 <nan+0x8>)
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	7ff80000 	.word	0x7ff80000

080038ac <rint>:
 80038ac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80038b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80038b6:	2f13      	cmp	r7, #19
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	460c      	mov	r4, r1
 80038be:	4605      	mov	r5, r0
 80038c0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80038c4:	dc59      	bgt.n	800397a <rint+0xce>
 80038c6:	2f00      	cmp	r7, #0
 80038c8:	da2a      	bge.n	8003920 <rint+0x74>
 80038ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80038ce:	4301      	orrs	r1, r0
 80038d0:	d022      	beq.n	8003918 <rint+0x6c>
 80038d2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80038d6:	4301      	orrs	r1, r0
 80038d8:	424d      	negs	r5, r1
 80038da:	430d      	orrs	r5, r1
 80038dc:	4936      	ldr	r1, [pc, #216]	; (80039b8 <rint+0x10c>)
 80038de:	0c5c      	lsrs	r4, r3, #17
 80038e0:	0b2d      	lsrs	r5, r5, #12
 80038e2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80038e6:	0464      	lsls	r4, r4, #17
 80038e8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80038ec:	ea45 0304 	orr.w	r3, r5, r4
 80038f0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fc fc30 	bl	800015c <__adddf3>
 80038fc:	e9cd 0100 	strd	r0, r1, [sp]
 8003900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003904:	462b      	mov	r3, r5
 8003906:	4622      	mov	r2, r4
 8003908:	f7fc fc26 	bl	8000158 <__aeabi_dsub>
 800390c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003910:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	4926      	ldr	r1, [pc, #152]	; (80039bc <rint+0x110>)
 8003922:	4139      	asrs	r1, r7
 8003924:	ea03 0001 	and.w	r0, r3, r1
 8003928:	4310      	orrs	r0, r2
 800392a:	d0f5      	beq.n	8003918 <rint+0x6c>
 800392c:	084b      	lsrs	r3, r1, #1
 800392e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8003932:	ea52 0501 	orrs.w	r5, r2, r1
 8003936:	d00c      	beq.n	8003952 <rint+0xa6>
 8003938:	ea24 0303 	bic.w	r3, r4, r3
 800393c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003940:	2f13      	cmp	r7, #19
 8003942:	bf0c      	ite	eq
 8003944:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003948:	2500      	movne	r5, #0
 800394a:	fa44 f707 	asr.w	r7, r4, r7
 800394e:	ea43 0407 	orr.w	r4, r3, r7
 8003952:	4919      	ldr	r1, [pc, #100]	; (80039b8 <rint+0x10c>)
 8003954:	4623      	mov	r3, r4
 8003956:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800395a:	462a      	mov	r2, r5
 800395c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f7fc fbfa 	bl	800015c <__adddf3>
 8003968:	e9cd 0100 	strd	r0, r1, [sp]
 800396c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003970:	4622      	mov	r2, r4
 8003972:	462b      	mov	r3, r5
 8003974:	f7fc fbf0 	bl	8000158 <__aeabi_dsub>
 8003978:	e7cc      	b.n	8003914 <rint+0x68>
 800397a:	2f33      	cmp	r7, #51	; 0x33
 800397c:	dd05      	ble.n	800398a <rint+0xde>
 800397e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003982:	d1c9      	bne.n	8003918 <rint+0x6c>
 8003984:	f7fc fbea 	bl	800015c <__adddf3>
 8003988:	e7c4      	b.n	8003914 <rint+0x68>
 800398a:	f04f 31ff 	mov.w	r1, #4294967295
 800398e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8003992:	fa21 f10c 	lsr.w	r1, r1, ip
 8003996:	4208      	tst	r0, r1
 8003998:	d0be      	beq.n	8003918 <rint+0x6c>
 800399a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800399e:	bf18      	it	ne
 80039a0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80039a4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80039a8:	bf1e      	ittt	ne
 80039aa:	ea20 0303 	bicne.w	r3, r0, r3
 80039ae:	fa45 fc0c 	asrne.w	ip, r5, ip
 80039b2:	ea43 050c 	orrne.w	r5, r3, ip
 80039b6:	e7cc      	b.n	8003952 <rint+0xa6>
 80039b8:	08003b40 	.word	0x08003b40
 80039bc:	000fffff 	.word	0x000fffff

080039c0 <scalbn>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80039c6:	4604      	mov	r4, r0
 80039c8:	460d      	mov	r5, r1
 80039ca:	4617      	mov	r7, r2
 80039cc:	460b      	mov	r3, r1
 80039ce:	b996      	cbnz	r6, 80039f6 <scalbn+0x36>
 80039d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80039d4:	4303      	orrs	r3, r0
 80039d6:	d039      	beq.n	8003a4c <scalbn+0x8c>
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <scalbn+0xf0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	f7fc fd74 	bl	80004c8 <__aeabi_dmul>
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <scalbn+0xf4>)
 80039e2:	4604      	mov	r4, r0
 80039e4:	429f      	cmp	r7, r3
 80039e6:	460d      	mov	r5, r1
 80039e8:	da0f      	bge.n	8003a0a <scalbn+0x4a>
 80039ea:	a32d      	add	r3, pc, #180	; (adr r3, 8003aa0 <scalbn+0xe0>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f7fc fd6a 	bl	80004c8 <__aeabi_dmul>
 80039f4:	e006      	b.n	8003a04 <scalbn+0x44>
 80039f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80039fa:	4296      	cmp	r6, r2
 80039fc:	d10a      	bne.n	8003a14 <scalbn+0x54>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f7fc fbac 	bl	800015c <__adddf3>
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	e020      	b.n	8003a4c <scalbn+0x8c>
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003a10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003a14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003a18:	19b9      	adds	r1, r7, r6
 8003a1a:	4291      	cmp	r1, r2
 8003a1c:	dd0e      	ble.n	8003a3c <scalbn+0x7c>
 8003a1e:	a322      	add	r3, pc, #136	; (adr r3, 8003aa8 <scalbn+0xe8>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003a28:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003a2c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003a30:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003a34:	4820      	ldr	r0, [pc, #128]	; (8003ab8 <scalbn+0xf8>)
 8003a36:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003a3a:	e7d9      	b.n	80039f0 <scalbn+0x30>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	dd08      	ble.n	8003a52 <scalbn+0x92>
 8003a40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003a56:	da16      	bge.n	8003a86 <scalbn+0xc6>
 8003a58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003a5c:	429f      	cmp	r7, r3
 8003a5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003a62:	dd08      	ble.n	8003a76 <scalbn+0xb6>
 8003a64:	4c15      	ldr	r4, [pc, #84]	; (8003abc <scalbn+0xfc>)
 8003a66:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <scalbn+0xf8>)
 8003a68:	f363 74df 	bfi	r4, r3, #31, #1
 8003a6c:	a30e      	add	r3, pc, #56	; (adr r3, 8003aa8 <scalbn+0xe8>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	4621      	mov	r1, r4
 8003a74:	e7bc      	b.n	80039f0 <scalbn+0x30>
 8003a76:	4c12      	ldr	r4, [pc, #72]	; (8003ac0 <scalbn+0x100>)
 8003a78:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <scalbn+0x104>)
 8003a7a:	f363 74df 	bfi	r4, r3, #31, #1
 8003a7e:	a308      	add	r3, pc, #32	; (adr r3, 8003aa0 <scalbn+0xe0>)
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	e7f5      	b.n	8003a72 <scalbn+0xb2>
 8003a86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a8a:	3136      	adds	r1, #54	; 0x36
 8003a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <scalbn+0x108>)
 8003a9c:	e7a8      	b.n	80039f0 <scalbn+0x30>
 8003a9e:	bf00      	nop
 8003aa0:	c2f8f359 	.word	0xc2f8f359
 8003aa4:	01a56e1f 	.word	0x01a56e1f
 8003aa8:	8800759c 	.word	0x8800759c
 8003aac:	7e37e43c 	.word	0x7e37e43c
 8003ab0:	43500000 	.word	0x43500000
 8003ab4:	ffff3cb0 	.word	0xffff3cb0
 8003ab8:	8800759c 	.word	0x8800759c
 8003abc:	7e37e43c 	.word	0x7e37e43c
 8003ac0:	01a56e1f 	.word	0x01a56e1f
 8003ac4:	c2f8f359 	.word	0xc2f8f359
 8003ac8:	3c900000 	.word	0x3c900000

08003acc <_init>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	bf00      	nop
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr

08003ad8 <_fini>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr
